package syntax;

import java_cup.runtime.*;
import java.util.*;
import arvore.*;
import arvore.comando.*;
import arvore.expressao.*;


parser code {:

  public void syntax_error(Symbol cur_token) {
	  System.out.printf("Erro de sintaxe na linha %d, coluna %d (token tipo %d inesperado). \n",
			  cur_token.left, cur_token.right, cur_token.sym);
			  System.out.println(cur_token.value);
  }
  public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
	  done_parsing();
	  String msg = "Erro de sintaxe na linha " + cur_token.left + ", coluna " + cur_token.right 
			  + " (token tipo " + cur_token.sym + " inesperado).";
			  System.out.println(cur_token.value);
	  throw new Exception(msg);
  }

:}

/*****  Terminais (tokens) *****/
/*o tipo que eu estou mandando no lexer eu devo mandar aqui*/
terminal String IDENTIFICADOR;
    
terminal String    OP_IGUAL;
terminal String    OP_DIFERENTE;
terminal String    OP_MAIOR_QUE;
terminal String    OP_MENOR_QUE;
terminal String    OP_MAIOR_OU_IGUAL;
terminal String    OP_MENOR_OU_IGUAL;
    
terminal String  SOMA;
terminal String  SUB;
terminal String  MULT;
terminal String  DIV;
terminal String  RESTO;
terminal String  AND;
terminal String  OR;
terminal String  NOT;
    
terminal ATRIBUICAO;
    
terminal ABRE_PAR;
terminal FECHA_PAR;
terminal ABRE_CHAVE;
terminal FECHA_CHAVE;
terminal VIRGULA;
terminal PONTO_VIRGULA;
terminal DOIS_PONTOS;
    
terminal String INT_LITERAL;
terminal String FLOAT_LITERAL;
terminal String CHAR_LITERAL;
terminal String STRING_LITERAL;
    
terminal KEY_IF;
terminal  KEY_ELSE;
terminal KEY_WHILE;
terminal KEY_RETURN;
terminal String    KEY_INT;
terminal String    KEY_FLOAT;
terminal String    KEY_CHAR;
terminal String    KEY_STRING;
terminal     KEY_CALL;
terminal     KEY_DEF;
terminal     KEY_PRINT;


/***** Nao-terminais *****/

non terminal Programa program;
non terminal DeclGlobal decl_global;
non terminal DeclGlobal decl_variavel;
non terminal List<Identificador> lista_idents;
non terminal List<Identificador> resto_lista_idents;
non terminal Tipo tipo;
non terminal DeclFuncao decl_funcao;
non terminal Assinatura assinatura;
non terminal List param_formais;
non terminal List resto_param_formais;
non terminal Bloco bloco;
non terminal List<Comando> lista_comandos;
non terminal Comando comando;
non terminal Atribuicao atribuicao;
non terminal Iteracao iteracao;
non terminal Decisao  decisao;
non terminal Escrita escrita;
non terminal ChamadaFuncCmd chamada_func_cmd;
non terminal Retorno retorno;
non terminal ChamadaFunc chamada_func;
non terminal List<Expressao> lista_exprs;
non terminal List<Expressao> resto_lista_exprs;
non terminal Expressao expressao;
non terminal Expressao expr_basica;



/***** Precedencia e associatividade *****/

precedence left OR, AND; //simbolos de menor precedencia
precedence left OP_IGUAL, OP_DIFERENTE, OP_MAIOR_QUE, OP_MENOR_QUE, OP_MAIOR_OU_IGUAL, OP_MENOR_OU_IGUAL;
precedence left SOMA, SUB;     
precedence left MULT, DIV, RESTO;   
precedence left NOT;     //simbolo de maior precedencia

/***** A gram√°tica *****/

program ::= program:prog decl_global:decl 
		{:

			prog.add(decl);
			
			RESULT = prog;
			
		:}
          | /*vazio*/
          {:
          RESULT = new Programa();
          :} 
          ;

decl_global ::= decl_variavel:decl
			{:
			RESULT = decl;
			:}
            | decl_funcao:decl
            {:
			RESULT = decl;
			:}
            ;
            
decl_variavel ::= lista_idents:lista DOIS_PONTOS tipo:tipo PONTO_VIRGULA
			{:
			RESULT = new DeclVariavel(tipo,lista);
			:}
               ;
               
lista_idents ::= IDENTIFICADOR:ident resto_lista_idents:resto 
			{:
				List<Identificador> idents = new ArrayList<Identificador>();
				
				idents.add(new Identificador(ident));
				
				if(resto!=null){
					idents.addAll(resto);
				}
				
				RESULT = idents;
			:} 
             ;

resto_lista_idents ::=  VIRGULA IDENTIFICADOR:ident resto_lista_idents:resto
					{:
					List<Identificador> idents = new ArrayList<Identificador>();
					idents.add(new Identificador(ident));
						if(resto!=null){
							idents.addAll(resto);
						}
						
						RESULT = idents;
					:}
                     |  /* vazio */
                     ;

tipo ::= KEY_INT 
		{:RESULT = Tipo.INT;:}
		| KEY_CHAR 
		{:RESULT = Tipo.CHAR;:}
		| KEY_FLOAT 
		{:RESULT = Tipo.FLOAT;:}
		| KEY_STRING
		{:RESULT = Tipo.STRING;:}
		 ;

decl_funcao ::= assinatura:ass bloco:bloco
{:
RESULT = new DeclFuncao(ass,bloco);
:} ;

assinatura ::= KEY_DEF IDENTIFICADOR:ident ABRE_PAR param_formais:paramFormais FECHA_PAR DOIS_PONTOS tipo:tipo
			{:
				Identificador i = new Identificador(ident);
				RESULT = new Assinatura(i,paramFormais,tipo);
			:}
             | KEY_DEF IDENTIFICADOR:ident ABRE_PAR param_formais:paramFormais FECHA_PAR
             {:
             	Identificador i = new Identificador(ident);
				RESULT = new Assinatura(i,paramFormais);
			:}
             ;

param_formais ::= IDENTIFICADOR:ident DOIS_PONTOS tipo:tipo resto_param_formais:paramFormais
				{:
				Identificador i = new Identificador(ident);
				
				i.setTipo(tipo);

				paramFormais.add(i);
			
				RESULT = paramFormais;
				:}
                | /*vazio*/ 
                {:
               
                RESULT = new ArrayList<Identificador>();
                :}
                ;
                
resto_param_formais ::= VIRGULA IDENTIFICADOR:ident DOIS_PONTOS tipo:tipo resto_param_formais:paramFormais
				{:
				Identificador i = new Identificador(ident);
				
				i.setTipo(tipo);

				paramFormais.add(i);
			
				RESULT = paramFormais;
				:}
                | /*vazio*/ 
                {:
               
                RESULT = new ArrayList<Identificador>();
                :}
                ;

bloco ::= ABRE_CHAVE lista_comandos:lista FECHA_CHAVE
		{:
		Bloco bloco = new Bloco();
		bloco.getComandos().addAll(lista);
		
		RESULT = bloco;
		:}
		 ;

lista_comandos ::= lista_comandos:lista comando:comando
				{:
					lista.add(comando);
					
					RESULT = lista;
				:}
				|/*vazio*/
				{:
				RESULT =  new ArrayList<Comando>();
				:}
                 ;

comando  ::= decl_variavel:cmd
			{:
           RESULT = cmd;
           :} 
           | atribuicao:cmd
           {:
           RESULT = cmd;
           :} 
           | iteracao:cmd
           {:
           RESULT = cmd;
           :} 
           | decisao:cmd 
           {:
           RESULT = cmd;
           :}
           | escrita:cmd 
           {:
           RESULT = cmd;
           :}
           | retorno:cmd 
           {:
           RESULT = cmd;
           :}
           | bloco:cmd 
           {:
           RESULT = cmd;
           :}
           | chamada_func_cmd:cmd
           {:
           RESULT = cmd;
           :}
           ;

atribuicao ::= lista_idents:lista ATRIBUICAO expressao:exp PONTO_VIRGULA 
			{:
				RESULT = new Atribuicao(lista,exp);
			:}
			;

iteracao ::= KEY_WHILE ABRE_PAR expressao:exp FECHA_PAR comando:cmd
			{:
				RESULT = new Iteracao(exp,cmd);
			:}
			 ;

decisao ::= KEY_IF ABRE_PAR expressao:expr FECHA_PAR comando:cmdIf KEY_ELSE comando:cmdElse
			{:
				RESULT = new Decisao( expr, cmdIf, cmdElse);
			:}
            | KEY_IF ABRE_PAR expressao:expr FECHA_PAR comando:cmdIf
            {:
				RESULT = new Decisao( expr, cmdIf);
			:}
            ;

escrita ::= KEY_PRINT ABRE_PAR expressao:exp FECHA_PAR PONTO_VIRGULA 
{:
RESULT=new Escrita(exp);
:} ;
chamada_func_cmd ::= KEY_CALL chamada_func:chamada PONTO_VIRGULA 
{:
RESULT=new ChamadaFuncCmd(chamada);
:} ;
retorno ::= KEY_RETURN expressao:exp PONTO_VIRGULA 
{:
RESULT=new Retorno(exp);
:} ;
chamada_func ::= IDENTIFICADOR:ident ABRE_PAR lista_exprs:lista_exp FECHA_PAR
{:
RESULT=new ChamadaFunc(ident,lista_exp);
:} ;

lista_exprs ::= expressao:exp resto_lista_exprs:resto
			{:
		List<Expressao> exps = new ArrayList<Expressao>();
		exps.add(exp);
			if(resto!=null){
				exps.addAll(resto);
			} 
			
			RESULT = exps;
			:}
              | /*vazio*/
              {:
              RESULT =new ArrayList<Expressao>();
              :}
              ; 

resto_lista_exprs ::= resto_lista_exprs:resto VIRGULA expressao:exp
{:
	List<Expressao> exps = new ArrayList<Expressao>();
		exps.add(exp);
			if(resto!=null){
				exps.addAll(resto);
			} 
			
			RESULT = exps;

:}
                    | /*vazio*/
                    ;

expressao ::= expressao:esq SOMA:lex expressao:dir
		{: RESULT = new ExpAritmetica(esq,dir,lex);:}
        | expressao:esq SUB:lex expressao:dir
        {: RESULT = new ExpAritmetica(esq,dir,lex);:}
        | expressao:esq MULT:lex expressao:dir
        {: RESULT = new ExpAritmetica(esq,dir,lex);:}
        | expressao:esq DIV:lex expressao:dir
        {: RESULT = new ExpAritmetica(esq,dir,lex);:}
        | expressao:esq RESTO:lex expressao:dir
        {: RESULT = new ExpAritmetica(esq,dir,lex);:}
        | expressao:esq AND:lex expressao:dir
        {: RESULT = new ExpLogica(esq,dir,"AND");:}
        | expressao:esq OR:lex expressao:dir
        {: RESULT = new ExpLogica(esq,dir,"OR");:}
        | expressao:esq OP_IGUAL expressao:dir
        {: RESULT = new ExprRelacional(esq,dir,"OP_IGUAL");:}
        | expressao:esq OP_DIFERENTE expressao:dir
        {: RESULT = new ExprRelacional(esq,dir,"OP_DIFERENTE");:}
        | expressao:esq OP_MENOR_QUE expressao:dir
        {: RESULT = new ExprRelacional(esq,dir,"OP_MENOR_QUE");:}
        | expressao:esq OP_MENOR_OU_IGUAL expressao:dir
        {: RESULT = new ExprRelacional(esq,dir,"OP_MENOR_OU_IGUAL");:}
        | expressao:esq OP_MAIOR_OU_IGUAL expressao:dir
        {: RESULT = new ExprRelacional(esq,dir,"OP_MAIOR_OU_IGUAL");:}
        | expressao:esq OP_MAIOR_QUE expressao:dir
        {: RESULT = new ExprRelacional(esq,dir,"OP_MAIOR_QUE");:}
        | expr_basica:exp
        {:RESULT = exp;:}
        ;

expr_basica ::= ABRE_PAR expressao FECHA_PAR 
         | NOT expr_basica:exp
         {:
         RESULT = new ExpUnaria("NOT",exp);
         :}
         | SUB expr_basica:exp
         {:
         RESULT = new ExpUnaria("-",exp);
         :}
         | INT_LITERAL:lex
         {:  
         int valor =  Integer.parseInt(lex);
         RESULT = new IntLiteral(valor); 
         :}
         | CHAR_LITERAL:lex
         {:  
         RESULT = new CharLiteral(lex); 
         :}
         | FLOAT_LITERAL:lex
         {:
         float valor =  Float.parseFloat(lex);
         RESULT = new FloatLiteral(valor); 
         :}
         | STRING_LITERAL:lex
         {:  
         RESULT = new StringLiteral(lex);
         :}
         | IDENTIFICADOR:lexema
         {:
         //TODO verificar se simbolo esta na tabela
         RESULT = new Identificador(lexema);
         :}
         | chamada_func:cmd
         {:
         RESULT = cmd;
         :}
         ;
