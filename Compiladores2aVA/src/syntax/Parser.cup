package syntax;

import java_cup.runtime.*;
import java.util.*;
import arvore.*;
import arvore.comando.*;
import arvore.expressao.*;


/*****  Terminais (tokens) *****/
/*o tipo que eu estou mandando no lexer eu devo mandar aqui*/
terminal Identificador IDENTIFICADOR;
    
terminal String    OP_IGUAL;
terminal String    OP_DIFERENTE;
terminal String    OP_MAIOR_QUE;
terminal String    OP_MENOR_QUE;
terminal String    OP_MAIOR_OU_IGUAL;
terminal String    OP_MENOR_OU_IGUAL;
    
terminal String  SOMA;
terminal String  SUB;
terminal String  MULT;
terminal String  DIV;
terminal String  RESTO;
terminal String  AND;
terminal String  OR;
terminal String  NOT;
    
terminal ATRIBUICAO;
    
terminal     ABRE_PAR;
terminal     FECHA_PAR;
terminal     ABRE_CHAVE;
terminal     FECHA_CHAVE;
terminal     VIRGULA;
terminal     PONTO_VIRGULA;
terminal     DOIS_PONTOS;
    
terminal String    INT_LITERAL;
terminal String    FLOAT_LITERAL;
terminal String    CHAR_LITERAL;
terminal String    STRING_LITERAL;
    
terminal     KEY_IF;
terminal     KEY_ELSE;
terminal     KEY_WHILE;
terminal     KEY_RETURN;
terminal String    KEY_INT;
terminal String    KEY_FLOAT;
terminal String    KEY_CHAR;
terminal String    KEY_STRING;
terminal     KEY_CALL;
terminal     KEY_DEF;
terminal     KEY_PRINT;


/***** Nao-terminais *****/

non terminal Programa program;
non terminal decl_global;
non terminal decl_variavel;
non terminal lista_idents;
non terminal resto_lista_idents;
non terminal tipo;
non terminal decl_funcao;
non terminal assinatura;
non terminal param_formais;
non terminal resto_param_formais;
non terminal bloco;
non terminal lista_comandos;
non terminal Comando comando;
non terminal atribuicao;
non terminal iteracao;
non terminal Decisao  decisao;
non terminal escrita;
non terminal chamada_func_cmd;
non terminal retorno;
non terminal chamada_func;
non terminal lista_exprs;
non terminal resto_lista_exprs;
non terminal Expressao expressao;
non terminal Expressao expr_basica;



/***** Precedencia e associatividade *****/

precedence left OR, AND; //simbolos de menor precedencia
precedence left OP_IGUAL, OP_DIFERENTE, OP_MAIOR_QUE, OP_MENOR_QUE, OP_MAIOR_OU_IGUAL, OP_MENOR_OU_IGUAL;
precedence left SOMA, SUB;     
precedence left MULT, DIV, RESTO;   
precedence left NOT;     //simbolo de maior precedencia

/***** A gramática *****/

program ::= program:progLoop decl_global:decl 
{:
	Programa prog = new Programa();
	
	if(progLoop!=null){
		for(DeclGlobal d1:progLoop.getDeclaracoes()){
			prog.add(d1);
		}
	}
	prog.add(decl);
	
	RESULT = prog;
	
:}
          | /*vazio*/ 
          ;

decl_global ::= decl_variavel:decl
			{:
			RESULT = decl;
			:}
            | decl_funcao:decl
            {:
			RESULT = decl;
			:}
            ;
            
decl_variavel ::= lista_idents:lista DOIS_PONTOS tipo:tipo PONTO_VIRGULA
{:
RESULT = DeclVariavel(tipo,lista);
:}
               ;
               
lista_idents ::= IDENTIFICADOR:ident resto_lista_idents:resto 
{:
	List<Identificador> idents = new ArrayList<Identificador>();
	
	idents.add(ident);
	
	if(resto!=null){
		idents.addAll(resto);
	}
	
	RESULT = idents;
:} 
             ;

resto_lista_idents ::=  VIRGULA IDENTIFICADOR:ident resto_lista_idents:resto
					{:
					List<Identificador> idents = new ArrayList<Identificador>();
					idents.add(ident);
						if(resto==null){
							idents.addAll(resto);
						}
						
						RESULT = idents;
					:}
                     |  /* vazio */
                     ;

tipo ::= KEY_INT 
		{:RESULT = Tipo.INT;:}
		| KEY_CHAR 
		{:RESULT = Tipo.CHAR;:}
		| KEY_FLOAT 
		{:RESULT = Tipo.FLOAT;:}
		| KEY_STRING
		{:RESULT = Tipo.STRING;:}
		 ;

decl_funcao ::= assinatura:assinatura bloco:bloco
{:
RESULT = new DeclFuncao(assinatura,bloco);
:} ;

assinatura ::= KEY_DEF IDENTIFICADOR:ident ABRE_PAR param_formais:param FECHA_PAR DOIS_PONTOS tipo:tipo
			{:
				RESULT = new Assinatura(ident,param,tipo);
			:}
             | KEY_DEF IDENTIFICADOR ABRE_PAR param_formais FECHA_PAR
             {:
				RESULT = new Assinatura(ident,param);
			:}
             ;

param_formais ::= IDENTIFICADOR:ident DOIS_PONTOS tipo:tipo resto_param_formais:resto 
				{:
				ident.setTipo(tipo);

				ParametrosFormais parametros = new ParametrosFormais();

				parametros.getParametros().add(ident);
					
					if(resto!=null){
						parametros.getParametros().addAll(resto);
					}
					
				RESULT = parametros;
				:}
                | /*vazio*/ 
                ;
                  
resto_param_formais ::= VIRGULA IDENTIFICADOR:ident DOIS_PONTOS tipo:tipo resto_param_formais:resto
					{:
						ident.setTipo(tipo);

						List param = new ArrayList<Identificador>();
						
						param.add(ident);
												
						if(resto!=null){
						param.addAll(resto);
						}
						
						RESULT = param;
					:}
                      | /*vazio*/
                      ; 

bloco ::= ABRE_CHAVE lista_comandos:lista FECHA_CHAVE
{:
Bloco bloco = new Bloco();
bloco.add(lista);

RESULT = bloco;
:}
 ;

lista_comandos ::= lista_comandos:lista comando:comando
{:
	List<Comando> comandos =  new ArrayList<>();
	comandos.add(comando);
	if(lista!=null){
	comandos.addAll(lista);
	}
:}
                 ;

comando  ::= decl_variavel:cmd
			{:
           RESULT = cmd;
           :} 
           | atribuicao:cmd
           {:
           RESULT = cmd;
           :} 
           | iteracao:cmd
           {:
           RESULT = cmd;
           :} 
           | decisao:cmd 
           {:
           RESULT = cmd;
           :}
           | escrita:cmd 
           {:
           RESULT = cmd;
           :}
           | retorno:cmd 
           {:
           RESULT = cmd;
           :}
           | bloco:cmd 
           {:
           RESULT = cmd;
           :}
           | chamada_func_cmd:cmd
           {:
           RESULT = cmd;
           :}
           ;

atribuicao ::= lista_idents ATRIBUICAO expressao PONTO_VIRGULA ;

iteracao ::= KEY_WHILE ABRE_PAR expressao FECHA_PAR comando ;

decisao ::= KEY_IF ABRE_PAR expressao:expr FECHA_PAR comando:cmdIf KEY_ELSE comando:cmdElse
			{:
				RESULT = new Decisao( expr, cmdIf, cmdElse);
			:}
            | KEY_IF ABRE_PAR expressao:expr FECHA_PAR comando:cmdIf
            {:
				RESULT = new Decisao( expr, cmdIf);
			:}
            ;

escrita ::= KEY_PRINT ABRE_PAR expressao FECHA_PAR PONTO_VIRGULA ;
{:
RESULT=new Escrita(exp);
:} ;
chamada_func_cmd ::= KEY_CALL chamada_func:chamada PONTO_VIRGULA ;
{:
RESULT=new ChamadaFuncCmd(chamada);
:} ;
retorno ::= KEY_RETURN expressao:exp PONTO_VIRGULA ;
{:
RESULT=new Retorno(exp);
:} ;
chamada_func ::= IDENTIFICADOR:ident ABRE_PAR lista_exprs:lista_exp FECHA_PAR
{:
RESULT=new ChamadaFunc(ident,lista_exp);
:} ;

lista_exprs ::= expressao:exp resto_lista_exprs:resto
			{:
		List<Expressao> exps = new ArrayList<Expressao>();
		exps.add(exp);
			if(resto!=null){
				exps.addAll(resto);
			} 
			
			RESULT = exps;
			:}
              | /*vazio*/
              {:
              RESULT =new ArrayList<Expressao>();
              :}
              ; 

resto_lista_exprs ::= resto_lista_exprs:resto VIRGULA expressao:exp
{:
	List<Expressao> exps = new ArrayList<Expressao>();
		exps.add(exp);
			if(resto!=null){
				exps.addAll(resto);
			} 
			
			RESULT = exps;

:}
                    | /*vazio*/
                    ;

expressao ::= expressao SOMA expressao
        | expressao:esq SUB:lex expressao:dir
        {: RESULT = new ExpAritmetica(esq,dir,lex);:}
        | expressao:esq MULT:lex expressao:dir
        {: RESULT = new ExpAritmetica(esq,dir,lex);:}
        | expressao:esq DIV:lex expressao:dir
        {: RESULT = new ExpAritmetica(esq,dir,lex);:}
        | expressao:esq RESTO:lex expressao:dir
        {: RESULT = new ExpAritmetica(esq,dir,lex);:}
        | expressao:esq AND:lex expressao:dir
        {: RESULT = new ExpLogica(esq,dir,"AND");:}
        | expressao:esq OR:lex expressao:dir
        {: RESULT = new ExpLogica(esq,dir,"OR");:}
        | expressao:esq OP_IGUAL:lex expressao:dir
        {: RESULT = new ExprRelacional(esq,dir);:}
        | expressao:esq OP_DIFERENTE:lex expressao:dir
        {: RESULT = new ExprRelacional(esq,dir);:}
        | expressao:esq OP_MENOR_QUE:lex expressao:dir
        {: RESULT = new ExprRelacional(esq,dir);:}
        | expressao:esq OP_MENOR_OU_IGUAL:lex expressao:dir
        {: RESULT = new ExprRelacional(esq,dir);:}
        | expressao:esq OP_MAIOR_OU_IGUAL:lex expressao:dir
        {: RESULT = new ExprRelacional:lex(esq,dir);:}
        | expressao:esq OP_MAIOR_QUE:lex expressao:dir
        {: RESULT = new ExprRelacional(esq,dir);:}
        | expr_basica:exp
        {:RESULT = exp;:}
        ;

expr_basica ::= ABRE_PAR expressao FECHA_PAR 
         | NOT expr_basica
         | SUB expr_basica
         | INT_LITERAL:lex
         {:  
         int valor =  Integer.parseInt(lex);
         RESULT = new IntLiteral(valor); 
         :}
         | CHAR_LITERAL:lex
         {:  
         RESULT = new CharLiteral(lex); 
         :}
         | FLOAT_LITERAL
         {:
         float valor =  Float.parseFloat(lex);
         RESULT = new FloatLiteral(valor); 
         :}
         | STRING_LITERAL:lex
         {:  
         RESULT = new StringLiteral(lex);
         :}
         | IDENTIFICADOR:lexema
         {:
         //TODO verificar se simbolo esta na tabela
         RESULT = new Identificador(lexema);
         :}
         | chamada_func
         ;

