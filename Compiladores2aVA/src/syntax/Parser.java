
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 16 22:26:27 BRT 2015
//----------------------------------------------------

package syntax;

import java_cup.runtime.*;
import java.util.*;
import arvore.*;
import arvore.comando.*;
import arvore.expressao.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 16 22:26:27 BRT 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\004\006" +
    "\000\002\005\004\000\002\006\005\000\002\006\002\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\010\004\000\002\011\011\000\002\011" +
    "\007\000\002\012\006\000\002\012\002\000\002\013\005" +
    "\000\002\014\004\000\002\014\002\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\016\006\000\002\017\007\000\002\020\011" +
    "\000\002\020\007\000\002\021\007\000\002\022\005\000" +
    "\002\023\005\000\002\024\006\000\002\025\004\000\002" +
    "\025\002\000\002\026\005\000\002\026\002\000\002\027" +
    "\005\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\003\000\002\030\005\000\002\030\004\000\002\030\004" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\010\002\uffff\004\uffff\050\uffff\001\002\000" +
    "\010\002\012\004\007\050\005\001\002\000\004\004\160" +
    "\001\002\000\010\002\ufffe\004\ufffe\050\ufffe\001\002\000" +
    "\010\023\ufff9\030\154\032\ufff9\001\002\000\010\002\ufffd" +
    "\004\ufffd\050\ufffd\001\002\000\004\032\041\001\002\000" +
    "\004\002\000\001\002\000\004\026\016\001\002\000\010" +
    "\002\001\004\001\050\001\001\002\000\010\002\ufff4\004" +
    "\ufff4\050\ufff4\001\002\000\022\004\uffed\026\uffed\027\uffed" +
    "\037\uffed\041\uffed\042\uffed\047\uffed\051\uffed\001\002\000" +
    "\022\004\007\026\016\027\036\037\033\041\021\042\026" +
    "\047\031\051\030\001\002\000\024\004\uffe5\026\uffe5\027" +
    "\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\047\uffe5\051\uffe5" +
    "\001\002\000\004\024\150\001\002\000\024\004\uffe8\026" +
    "\uffe8\027\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\047\uffe8" +
    "\051\uffe8\001\002\000\024\004\uffe6\026\uffe6\027\uffe6\037" +
    "\uffe6\040\uffe6\041\uffe6\042\uffe6\047\uffe6\051\uffe6\001\002" +
    "\000\024\004\uffeb\026\uffeb\027\uffeb\037\uffeb\040\uffeb\041" +
    "\uffeb\042\uffeb\047\uffeb\051\uffeb\001\002\000\024\004\uffe9" +
    "\026\uffe9\027\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\047" +
    "\uffe9\051\uffe9\001\002\000\022\004\061\014\054\022\060" +
    "\024\056\033\051\034\055\035\057\036\052\001\002\000" +
    "\024\004\uffea\026\uffea\027\uffea\037\uffea\040\uffea\041\uffea" +
    "\042\uffea\047\uffea\051\uffea\001\002\000\004\024\142\001" +
    "\002\000\004\004\140\001\002\000\024\004\uffe7\026\uffe7" +
    "\027\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\047\uffe7\051" +
    "\uffe7\001\002\000\004\024\131\001\002\000\024\004\uffec" +
    "\026\uffec\027\uffec\037\uffec\040\uffec\041\uffec\042\uffec\047" +
    "\uffec\051\uffec\001\002\000\006\023\040\032\041\001\002" +
    "\000\030\002\uffef\004\uffef\026\uffef\027\uffef\037\uffef\040" +
    "\uffef\041\uffef\042\uffef\047\uffef\050\uffef\051\uffef\001\002" +
    "\000\022\004\uffee\026\uffee\027\uffee\037\uffee\041\uffee\042" +
    "\uffee\047\uffee\051\uffee\001\002\000\022\004\061\014\054" +
    "\022\060\024\056\033\051\034\055\035\057\036\052\001" +
    "\002\000\012\043\044\044\042\045\046\046\045\001\002" +
    "\000\012\004\ufff6\025\ufff6\026\ufff6\031\ufff6\001\002\000" +
    "\004\031\047\001\002\000\012\004\ufff8\025\ufff8\026\ufff8" +
    "\031\ufff8\001\002\000\012\004\ufff5\025\ufff5\026\ufff5\031" +
    "\ufff5\001\002\000\012\004\ufff7\025\ufff7\026\ufff7\031\ufff7" +
    "\001\002\000\030\002\ufffc\004\ufffc\026\ufffc\027\ufffc\037" +
    "\ufffc\040\ufffc\041\ufffc\042\ufffc\047\ufffc\050\ufffc\051\ufffc" +
    "\001\002\000\042\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011" +
    "\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb" +
    "\020\uffcb\021\uffcb\025\uffcb\030\uffcb\031\uffcb\001\002\000" +
    "\042\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7" +
    "\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021" +
    "\uffc7\025\uffc7\030\uffc7\031\uffc7\001\002\000\042\005\uffc4" +
    "\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014" +
    "\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\025\uffc4" +
    "\030\uffc4\031\uffc4\001\002\000\036\005\067\006\070\007" +
    "\077\010\073\011\075\012\102\013\101\014\074\015\072" +
    "\016\076\017\071\020\066\021\103\031\130\001\002\000" +
    "\022\004\061\014\054\022\060\024\056\033\051\034\055" +
    "\035\057\036\052\001\002\000\042\005\uffc5\006\uffc5\007" +
    "\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5" +
    "\016\uffc5\017\uffc5\020\uffc5\021\uffc5\025\uffc5\030\uffc5\031" +
    "\uffc5\001\002\000\022\004\061\014\054\022\060\024\056" +
    "\033\051\034\055\035\057\036\052\001\002\000\042\005" +
    "\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6" +
    "\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\025" +
    "\uffc6\030\uffc6\031\uffc6\001\002\000\022\004\061\014\054" +
    "\022\060\024\056\033\051\034\055\035\057\036\052\001" +
    "\002\000\044\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3" +
    "\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020" +
    "\uffc3\021\uffc3\024\063\025\uffc3\030\uffc3\031\uffc3\001\002" +
    "\000\042\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012" +
    "\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2" +
    "\021\uffc2\025\uffc2\030\uffc2\031\uffc2\001\002\000\024\004" +
    "\061\014\054\022\060\024\056\025\uffdb\033\051\034\055" +
    "\035\057\036\052\001\002\000\004\025\123\001\002\000" +
    "\040\005\067\006\070\007\077\010\073\011\075\012\102" +
    "\013\101\014\074\015\072\016\076\017\071\020\066\021" +
    "\103\025\uffd9\030\uffd9\001\002\000\022\004\061\014\054" +
    "\022\060\024\056\033\051\034\055\035\057\036\052\001" +
    "\002\000\022\004\061\014\054\022\060\024\056\033\051" +
    "\034\055\035\057\036\052\001\002\000\022\004\061\014" +
    "\054\022\060\024\056\033\051\034\055\035\057\036\052" +
    "\001\002\000\022\004\061\014\054\022\060\024\056\033" +
    "\051\034\055\035\057\036\052\001\002\000\022\004\061" +
    "\014\054\022\060\024\056\033\051\034\055\035\057\036" +
    "\052\001\002\000\022\004\061\014\054\022\060\024\056" +
    "\033\051\034\055\035\057\036\052\001\002\000\022\004" +
    "\061\014\054\022\060\024\056\033\051\034\055\035\057" +
    "\036\052\001\002\000\022\004\061\014\054\022\060\024" +
    "\056\033\051\034\055\035\057\036\052\001\002\000\022" +
    "\004\061\014\054\022\060\024\056\033\051\034\055\035" +
    "\057\036\052\001\002\000\022\004\061\014\054\022\060" +
    "\024\056\033\051\034\055\035\057\036\052\001\002\000" +
    "\006\025\uffdc\030\107\001\002\000\022\004\061\014\054" +
    "\022\060\024\056\033\051\034\055\035\057\036\052\001" +
    "\002\000\022\004\061\014\054\022\060\024\056\033\051" +
    "\034\055\035\057\036\052\001\002\000\022\004\061\014" +
    "\054\022\060\024\056\033\051\034\055\035\057\036\052" +
    "\001\002\000\042\005\067\006\070\007\077\010\073\011" +
    "\075\012\102\013\101\014\074\015\072\016\076\017\071" +
    "\020\uffd2\021\uffd2\025\uffd2\030\uffd2\031\uffd2\001\002\000" +
    "\042\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce" +
    "\013\101\014\074\015\072\016\076\017\071\020\uffce\021" +
    "\uffce\025\uffce\030\uffce\031\uffce\001\002\000\042\005\uffd8" +
    "\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014" +
    "\uffd8\015\072\016\076\017\071\020\uffd8\021\uffd8\025\uffd8" +
    "\030\uffd8\031\uffd8\001\002\000\022\004\061\014\054\022" +
    "\060\024\056\033\051\034\055\035\057\036\052\001\002" +
    "\000\040\005\067\006\070\007\077\010\073\011\075\012" +
    "\102\013\101\014\074\015\072\016\076\017\071\020\066" +
    "\021\103\025\uffda\030\uffda\001\002\000\042\005\uffcc\006" +
    "\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\101\014\074" +
    "\015\072\016\076\017\071\020\uffcc\021\uffcc\025\uffcc\030" +
    "\uffcc\031\uffcc\001\002\000\042\005\uffd5\006\uffd5\007\uffd5" +
    "\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016" +
    "\uffd5\017\uffd5\020\uffd5\021\uffd5\025\uffd5\030\uffd5\031\uffd5" +
    "\001\002\000\042\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011" +
    "\uffcd\012\uffcd\013\101\014\074\015\072\016\076\017\071" +
    "\020\uffcd\021\uffcd\025\uffcd\030\uffcd\031\uffcd\001\002\000" +
    "\042\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\015\072\016\076\017\071\020\uffd7\021" +
    "\uffd7\025\uffd7\030\uffd7\031\uffd7\001\002\000\042\005\uffcf" +
    "\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\101\014" +
    "\074\015\072\016\076\017\071\020\uffcf\021\uffcf\025\uffcf" +
    "\030\uffcf\031\uffcf\001\002\000\042\005\uffd6\006\uffd6\007" +
    "\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6" +
    "\016\uffd6\017\uffd6\020\uffd6\021\uffd6\025\uffd6\030\uffd6\031" +
    "\uffd6\001\002\000\042\005\uffd4\006\uffd4\007\uffd4\010\uffd4" +
    "\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017" +
    "\uffd4\020\uffd4\021\uffd4\025\uffd4\030\uffd4\031\uffd4\001\002" +
    "\000\042\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012" +
    "\uffd0\013\101\014\074\015\072\016\076\017\071\020\uffd0" +
    "\021\uffd0\025\uffd0\030\uffd0\031\uffd0\001\002\000\042\005" +
    "\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\101" +
    "\014\074\015\072\016\076\017\071\020\uffd1\021\uffd1\025" +
    "\uffd1\030\uffd1\031\uffd1\001\002\000\042\005\067\006\070" +
    "\007\077\010\073\011\075\012\102\013\101\014\074\015" +
    "\072\016\076\017\071\020\uffd3\021\uffd3\025\uffd3\030\uffd3" +
    "\031\uffd3\001\002\000\042\005\uffdd\006\uffdd\007\uffdd\010" +
    "\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd" +
    "\017\uffdd\020\uffdd\021\uffdd\025\uffdd\030\uffdd\031\uffdd\001" +
    "\002\000\042\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9" +
    "\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\025\uffc9\030\uffc9\031\uffc9\001\002\000\036" +
    "\005\067\006\070\007\077\010\073\011\075\012\102\013" +
    "\101\014\074\015\072\016\076\017\071\020\066\021\103" +
    "\025\126\001\002\000\042\005\uffca\006\uffca\007\uffca\010" +
    "\uffca\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca" +
    "\017\uffca\020\uffca\021\uffca\025\uffca\030\uffca\031\uffca\001" +
    "\002\000\042\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8" +
    "\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020" +
    "\uffc8\021\uffc8\025\uffc8\030\uffc8\031\uffc8\001\002\000\024" +
    "\004\uffe4\026\uffe4\027\uffe4\037\uffe4\040\uffe4\041\uffe4\042" +
    "\uffe4\047\uffe4\051\uffe4\001\002\000\022\004\061\014\054" +
    "\022\060\024\056\033\051\034\055\035\057\036\052\001" +
    "\002\000\036\005\067\006\070\007\077\010\073\011\075" +
    "\012\102\013\101\014\074\015\072\016\076\017\071\020" +
    "\066\021\103\025\133\001\002\000\020\004\007\026\016" +
    "\037\033\041\021\042\026\047\031\051\030\001\002\000" +
    "\024\004\uffe1\026\uffe1\027\uffe1\037\uffe1\040\135\041\uffe1" +
    "\042\uffe1\047\uffe1\051\uffe1\001\002\000\020\004\007\026" +
    "\016\037\033\041\021\042\026\047\031\051\030\001\002" +
    "\000\024\004\uffe2\026\uffe2\027\uffe2\037\uffe2\040\uffe2\041" +
    "\uffe2\042\uffe2\047\uffe2\051\uffe2\001\002\000\004\031\141" +
    "\001\002\000\004\024\063\001\002\000\024\004\uffdf\026" +
    "\uffdf\027\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\047\uffdf" +
    "\051\uffdf\001\002\000\022\004\061\014\054\022\060\024" +
    "\056\033\051\034\055\035\057\036\052\001\002\000\036" +
    "\005\067\006\070\007\077\010\073\011\075\012\102\013" +
    "\101\014\074\015\072\016\076\017\071\020\066\021\103" +
    "\025\144\001\002\000\004\031\145\001\002\000\024\004" +
    "\uffe0\026\uffe0\027\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\047\uffe0\051\uffe0\001\002\000\036\005\067\006\070\007" +
    "\077\010\073\011\075\012\102\013\101\014\074\015\072" +
    "\016\076\017\071\020\066\021\103\031\147\001\002\000" +
    "\024\004\uffde\026\uffde\027\uffde\037\uffde\040\uffde\041\uffde" +
    "\042\uffde\047\uffde\051\uffde\001\002\000\022\004\061\014" +
    "\054\022\060\024\056\033\051\034\055\035\057\036\052" +
    "\001\002\000\036\005\067\006\070\007\077\010\073\011" +
    "\075\012\102\013\101\014\074\015\072\016\076\017\071" +
    "\020\066\021\103\025\152\001\002\000\020\004\007\026" +
    "\016\037\033\041\021\042\026\047\031\051\030\001\002" +
    "\000\024\004\uffe3\026\uffe3\027\uffe3\037\uffe3\040\uffe3\041" +
    "\uffe3\042\uffe3\047\uffe3\051\uffe3\001\002\000\004\004\156" +
    "\001\002\000\006\023\ufffb\032\ufffb\001\002\000\010\023" +
    "\ufff9\030\154\032\ufff9\001\002\000\006\023\ufffa\032\ufffa" +
    "\001\002\000\004\024\161\001\002\000\006\004\162\025" +
    "\ufff0\001\002\000\004\032\167\001\002\000\004\025\164" +
    "\001\002\000\006\026\ufff2\032\165\001\002\000\012\043" +
    "\044\044\042\045\046\046\045\001\002\000\004\026\ufff3" +
    "\001\002\000\012\043\044\044\042\045\046\046\045\001" +
    "\002\000\006\004\162\025\ufff0\001\002\000\004\025\ufff1" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\004\002\003\001\001\000\014\003\013\004" +
    "\005\005\010\010\007\011\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\016\001\001\000\026\004\033\005\034\013\022\015\036" +
    "\016\023\017\026\020\024\021\021\022\017\023\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\024\061\027\145\030\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\024\061\027" +
    "\052\030\047\001\001\000\004\007\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\024\061\030\126\001\001\000\002\001\001\000\010" +
    "\024\061\027\124\030\047\001\001\000\002\001\001\000" +
    "\006\024\061\030\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\024\061\025\063\027\064\030\047\001" +
    "\001\000\002\001\001\000\004\026\077\001\001\000\010" +
    "\024\061\027\121\030\047\001\001\000\010\024\061\027" +
    "\120\030\047\001\001\000\010\024\061\027\117\030\047" +
    "\001\001\000\010\024\061\027\116\030\047\001\001\000" +
    "\010\024\061\027\115\030\047\001\001\000\010\024\061" +
    "\027\114\030\047\001\001\000\010\024\061\027\113\030" +
    "\047\001\001\000\010\024\061\027\112\030\047\001\001" +
    "\000\010\024\061\027\111\030\047\001\001\000\010\024" +
    "\061\027\110\030\047\001\001\000\002\001\001\000\010" +
    "\024\061\027\105\030\047\001\001\000\010\024\061\027" +
    "\104\030\047\001\001\000\010\024\061\027\103\030\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\024\061\027\107\030\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\024\061\027\131\030\047\001\001\000\002" +
    "\001\001\000\026\004\033\005\034\013\022\015\133\016" +
    "\023\017\026\020\024\021\021\022\017\023\031\001\001" +
    "\000\002\001\001\000\026\004\033\005\034\013\022\015" +
    "\135\016\023\017\026\020\024\021\021\022\017\023\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\024\061\027\142\030\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\024\061" +
    "\027\150\030\047\001\001\000\002\001\001\000\026\004" +
    "\033\005\034\013\022\015\152\016\023\017\026\020\024" +
    "\021\021\022\017\023\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\156\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\165\001\001\000\002\001\001\000\004\007" +
    "\167\001\001\000\004\012\170\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public void syntax_error(Symbol cur_token) {
	  System.out.printf("Erro de sintaxe na linha %d, coluna %d (token tipo %d inesperado). \n",
			  cur_token.left, cur_token.right, cur_token.sym);
			  System.out.println(cur_token.value);
  }
  public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
	  done_parsing();
	  String msg = "Erro de sintaxe na linha " + cur_token.left + ", coluna " + cur_token.right 
			  + " (token tipo " + cur_token.sym + " inesperado).";
			  System.out.println(cur_token.value);
	  throw new Exception(msg);
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr_basica ::= chamada_func 
            {
              Expressao RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_basica",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr_basica ::= IDENTIFICADOR 
            {
              Expressao RESULT =null;
		int lexemaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lexemaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String lexema = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
         //TODO verificar se simbolo esta na tabela
         RESULT = new Identificador(lexema);
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_basica",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr_basica ::= STRING_LITERAL 
            {
              Expressao RESULT =null;
		int lexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String lex = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
         RESULT = new StringLiteral(lex);
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_basica",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr_basica ::= FLOAT_LITERAL 
            {
              Expressao RESULT =null;
		int lexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String lex = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
         float valor =  Float.parseFloat(lex);
         RESULT = new FloatLiteral(valor); 
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_basica",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr_basica ::= CHAR_LITERAL 
            {
              Expressao RESULT =null;
		int lexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String lex = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
         RESULT = new CharLiteral(lex); 
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_basica",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr_basica ::= INT_LITERAL 
            {
              Expressao RESULT =null;
		int lexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String lex = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
         int valor =  Integer.parseInt(lex);
         RESULT = new IntLiteral(valor); 
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_basica",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr_basica ::= SUB expr_basica 
            {
              Expressao RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_basica",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr_basica ::= NOT expr_basica 
            {
              Expressao RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_basica",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr_basica ::= ABRE_PAR expressao FECHA_PAR 
            {
              Expressao RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_basica",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expressao ::= expr_basica 
            {
              Expressao RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expressao ::= expressao OP_MAIOR_QUE expressao 
            {
              Expressao RESULT =null;
		int esqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int esqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao esq = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dirleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao dir = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprRelacional(esq,dir);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expressao ::= expressao OP_MAIOR_OU_IGUAL expressao 
            {
              Expressao RESULT =null;
		int esqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int esqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao esq = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dirleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao dir = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprRelacional(esq,dir);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expressao ::= expressao OP_MENOR_OU_IGUAL expressao 
            {
              Expressao RESULT =null;
		int esqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int esqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao esq = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dirleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao dir = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprRelacional(esq,dir);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expressao ::= expressao OP_MENOR_QUE expressao 
            {
              Expressao RESULT =null;
		int esqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int esqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao esq = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dirleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao dir = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprRelacional(esq,dir);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expressao ::= expressao OP_DIFERENTE expressao 
            {
              Expressao RESULT =null;
		int esqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int esqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao esq = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dirleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao dir = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprRelacional(esq,dir);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expressao ::= expressao OP_IGUAL expressao 
            {
              Expressao RESULT =null;
		int esqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int esqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao esq = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dirleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao dir = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprRelacional(esq,dir);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expressao ::= expressao OR expressao 
            {
              Expressao RESULT =null;
		int esqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int esqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao esq = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String lex = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dirleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao dir = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpLogica(esq,dir,"OR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expressao ::= expressao AND expressao 
            {
              Expressao RESULT =null;
		int esqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int esqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao esq = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String lex = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dirleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao dir = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpLogica(esq,dir,"AND");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expressao ::= expressao RESTO expressao 
            {
              Expressao RESULT =null;
		int esqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int esqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao esq = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String lex = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dirleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao dir = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpAritmetica(esq,dir,lex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expressao ::= expressao DIV expressao 
            {
              Expressao RESULT =null;
		int esqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int esqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao esq = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String lex = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dirleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao dir = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpAritmetica(esq,dir,lex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expressao ::= expressao MULT expressao 
            {
              Expressao RESULT =null;
		int esqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int esqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao esq = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String lex = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dirleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao dir = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpAritmetica(esq,dir,lex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expressao ::= expressao SUB expressao 
            {
              Expressao RESULT =null;
		int esqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int esqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao esq = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String lex = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dirleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao dir = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpAritmetica(esq,dir,lex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expressao ::= expressao SOMA expressao 
            {
              Expressao RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // resto_lista_exprs ::= 
            {
              List<Expressao> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resto_lista_exprs",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // resto_lista_exprs ::= resto_lista_exprs VIRGULA expressao 
            {
              List<Expressao> RESULT =null;
		int restoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int restoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expressao> resto = (List<Expressao>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	List<Expressao> exps = new ArrayList<Expressao>();
		exps.add(exp);
			if(resto!=null){
				exps.addAll(resto);
			} 
			
			RESULT = exps;


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resto_lista_exprs",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // lista_exprs ::= 
            {
              List<Expressao> RESULT =null;
		
              RESULT =new ArrayList<Expressao>();
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_exprs",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lista_exprs ::= expressao resto_lista_exprs 
            {
              List<Expressao> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int restoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int restoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Expressao> resto = (List<Expressao>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		List<Expressao> exps = new ArrayList<Expressao>();
		exps.add(exp);
			if(resto!=null){
				exps.addAll(resto);
			} 
			
			RESULT = exps;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_exprs",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // chamada_func ::= IDENTIFICADOR ABRE_PAR lista_exprs FECHA_PAR 
            {
              ChamadaFunc RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lista_expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lista_expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expressao> lista_exp = (List<Expressao>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
RESULT=new ChamadaFunc(ident,lista_exp);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamada_func",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // retorno ::= KEY_RETURN expressao PONTO_VIRGULA 
            {
              Retorno RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
RESULT=new Retorno(exp);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // chamada_func_cmd ::= KEY_CALL chamada_func PONTO_VIRGULA 
            {
              ChamadaFuncCmd RESULT =null;
		int chamadaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int chamadaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ChamadaFunc chamada = (ChamadaFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
RESULT=new ChamadaFuncCmd(chamada);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamada_func_cmd",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // escrita ::= KEY_PRINT ABRE_PAR expressao FECHA_PAR PONTO_VIRGULA 
            {
              Escrita RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
RESULT=new Escrita(exp);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escrita",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // decisao ::= KEY_IF ABRE_PAR expressao FECHA_PAR comando 
            {
              Decisao RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao expr = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cmdIfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cmdIfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Comando cmdIf = (Comando)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new Decisao( expr, cmdIf);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decisao",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // decisao ::= KEY_IF ABRE_PAR expressao FECHA_PAR comando KEY_ELSE comando 
            {
              Decisao RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expressao expr = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cmdIfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cmdIfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Comando cmdIf = (Comando)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cmdElseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cmdElseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Comando cmdElse = (Comando)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new Decisao( expr, cmdIf, cmdElse);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decisao",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // iteracao ::= KEY_WHILE ABRE_PAR expressao FECHA_PAR comando 
            {
              Iteracao RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cmdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cmdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Comando cmd = (Comando)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new Iteracao(exp,cmd);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteracao",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // atribuicao ::= lista_idents ATRIBUICAO expressao PONTO_VIRGULA 
            {
              Atribuicao RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Identificador> lista = (List<Identificador>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new Atribuicao(lista,exp);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuicao",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // comando ::= chamada_func_cmd 
            {
              Comando RESULT =null;
		int cmdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cmdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ChamadaFuncCmd cmd = (ChamadaFuncCmd)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = cmd;
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // comando ::= bloco 
            {
              Comando RESULT =null;
		int cmdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cmdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Bloco cmd = (Bloco)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = cmd;
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // comando ::= retorno 
            {
              Comando RESULT =null;
		int cmdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cmdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Retorno cmd = (Retorno)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = cmd;
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // comando ::= escrita 
            {
              Comando RESULT =null;
		int cmdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cmdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Escrita cmd = (Escrita)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = cmd;
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // comando ::= decisao 
            {
              Comando RESULT =null;
		int cmdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cmdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decisao cmd = (Decisao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = cmd;
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // comando ::= iteracao 
            {
              Comando RESULT =null;
		int cmdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cmdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Iteracao cmd = (Iteracao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = cmd;
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // comando ::= atribuicao 
            {
              Comando RESULT =null;
		int cmdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cmdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Atribuicao cmd = (Atribuicao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = cmd;
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // comando ::= decl_variavel 
            {
              Comando RESULT =null;
		int cmdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cmdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclGlobal cmd = (DeclGlobal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = cmd;
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lista_comandos ::= 
            {
              List<Comando> RESULT =null;
		
				RESULT =  new ArrayList<Comando>();
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_comandos",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lista_comandos ::= lista_comandos comando 
            {
              List<Comando> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Comando> lista = (List<Comando>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int comandoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comandoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Comando comando = (Comando)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					lista.add(comando);
					
					RESULT = lista;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_comandos",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bloco ::= ABRE_CHAVE lista_comandos FECHA_CHAVE 
            {
              Bloco RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Comando> lista = (List<Comando>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		Bloco bloco = new Bloco();
		bloco.getComandos().addAll(lista);
		
		RESULT = bloco;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // param_formais ::= 
            {
              List RESULT =null;
		
               
                RESULT = new ArrayList<Identificador>();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_formais",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // param_formais ::= IDENTIFICADOR DOIS_PONTOS tipo param_formais 
            {
              List RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int paramFormaisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramFormaisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List paramFormais = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Identificador i = new Identificador(ident);
				
				//i.setTipo(tipo);

				paramFormais.add(i);
			
				RESULT = paramFormais;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_formais",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // assinatura ::= KEY_DEF IDENTIFICADOR ABRE_PAR param_formais FECHA_PAR 
            {
              Assinatura RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int paramFormaisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paramFormaisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List paramFormais = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
             	Identificador i = new Identificador(ident);
				RESULT = new Assinatura(i,paramFormais);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assinatura",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // assinatura ::= KEY_DEF IDENTIFICADOR ABRE_PAR param_formais FECHA_PAR DOIS_PONTOS tipo 
            {
              Assinatura RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int paramFormaisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int paramFormaisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List paramFormais = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Identificador i = new Identificador(ident);
				RESULT = new Assinatura(i,paramFormais,tipo);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assinatura",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // decl_funcao ::= assinatura bloco 
            {
              DeclFuncao RESULT =null;
		int assleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int assright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Assinatura ass = (Assinatura)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int blocoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blocoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Bloco bloco = (Bloco)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
RESULT = new DeclFuncao(ass,bloco);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_funcao",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo ::= KEY_STRING 
            {
              Tipo RESULT =null;
		RESULT = Tipo.STRING;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo ::= KEY_FLOAT 
            {
              Tipo RESULT =null;
		RESULT = Tipo.FLOAT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= KEY_CHAR 
            {
              Tipo RESULT =null;
		RESULT = Tipo.CHAR;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo ::= KEY_INT 
            {
              Tipo RESULT =null;
		RESULT = Tipo.INT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // resto_lista_idents ::= 
            {
              List<Identificador> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resto_lista_idents",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // resto_lista_idents ::= VIRGULA IDENTIFICADOR resto_lista_idents 
            {
              List<Identificador> RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int restoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int restoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Identificador> resto = (List<Identificador>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					List<Identificador> idents = new ArrayList<Identificador>();
					idents.add(new Identificador(ident));
						if(resto!=null){
							idents.addAll(resto);
						}
						
						RESULT = idents;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resto_lista_idents",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_idents ::= IDENTIFICADOR resto_lista_idents 
            {
              List<Identificador> RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int restoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int restoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Identificador> resto = (List<Identificador>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				List<Identificador> idents = new ArrayList<Identificador>();
				
				idents.add(new Identificador(ident));
				
				if(resto!=null){
					idents.addAll(resto);
				}
				
				RESULT = idents;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_idents",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl_variavel ::= lista_idents DOIS_PONTOS tipo PONTO_VIRGULA 
            {
              DeclGlobal RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Identificador> lista = (List<Identificador>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			RESULT = new DeclVariavel(tipo,lista);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_variavel",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl_global ::= decl_funcao 
            {
              DeclGlobal RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclFuncao decl = (DeclFuncao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = decl;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_global",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decl_global ::= decl_variavel 
            {
              DeclGlobal RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclGlobal decl = (DeclGlobal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = decl;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_global",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= 
            {
              Programa RESULT =null;
		
          RESULT = new Programa();
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= program decl_global 
            {
              Programa RESULT =null;
		int progleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int progright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Programa prog = (Programa)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclGlobal decl = (DeclGlobal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

			prog.add(decl);
			
			RESULT = prog;
			
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

